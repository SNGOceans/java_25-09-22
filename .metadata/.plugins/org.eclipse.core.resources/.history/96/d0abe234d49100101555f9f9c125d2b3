package examStudent;

public class Student {
    /* 
     * 멤버 변수
     * - studentNum: 학번
     * - studentName: 이름
     * - Age: 나이
     * - stdphone_number: 전화번호
     * - studentAddress: 주소
     * - subjects: 수강 과목 배열 (최대 5개)
     * - count: 현재 수강 중인 과목 수
     */

    private String studentNum;
    private String studentName;
    private int Age;
    private String stdphone_number;
    private String studentAddress;
    private Subject[] subjects = new Subject[5];
    private int count;

    // 기본 생성자
    public Student() {}

    // 매개변수 생성자
    public Student(String studentNum, String studentName,
                   int Age, String phone_number, 
                   String studentAddress, Subject[] subjects,
                   int count) {
        this.studentNum = studentNum;
        this.studentName = studentName;
        this.Age = Age;
        this.stdphone_number = phone_number; // 수정됨
        this.studentAddress = studentAddress;
        this.subjects = subjects;
        this.count = count;
    }

    // 학생 정보 출력 메서드
    public void printStudentInfo() {
        System.out.println("---학생 정보---");
        System.out.println("학번: " + studentNum);
        System.out.println("이름: " + studentName);
        System.out.println("나이: " + Age);
        System.out.println("전화번호: " + stdphone_number);
        System.out.println("주소: " + studentAddress);
        System.out.println("수강과목:");
        printSubjectList(); // 수정됨
        System.out.println("수강과목 수: " + count);
    }

    // 수강 과목 출력 메서드
    public void printSubjectList() {
        if (count == 0) {
            System.out.println("해당 학생은 수강과목이 없습니다.");
        } else {
            for (int i = 0; i < count; i++) {
                subjects[i].printclassInfo();
            }
        }
    }

    // 수강 과목 추가 메서드
    public void insertSubject(Subject subject) {
        // 배열이 꽉 찼을 경우
    	if(count == subjects.length) {
    		// 배열 늘려주기
    		Subject[] tmp = new Subject[subjects.length+5];
    		// 배열 복사
    		System.arraycopy(subjects, 0,  tmp, 0, subjects.length);
    		subjects = tmp;
    	}
        
        // 이미 수강신청을 한 과목일 경우
    	for(int i=0; i < count; i++) {
    		if(subjects[i].getSubjectCode().equals(subject.getSubjectCode())) {
    			System.out.println("이미 추가한 과목입니다.");
    			return; //메서드를 빠져나가는 방법. (return)
    		}
    	}
    	subjects[count++] = subject;
    }

    // 수강 과목 삭제(철회) 메서드
    public void deleteSubject(Subject subject) {
        boolean found = false;

        for (int i = 0; i < count; i++) {
            if (subjects[i].getSubjectCode().equals(subject.getSubjectCode())) {
                for (int j = i; j < count - 1; j++) {
                    subjects[j] = subjects[j + 1];
                }
                subjects[count - 1] = null;
                count--;
                found = true;
                System.out.println("수강철회 완료!");
                break;
            }
        }

        if (!found) {
            System.out.println("해당 과목을 찾을 수 없습니다.");
        }
    }

    // Getter & Setter
    public String getStudentNum() { return studentNum; }
    public void setStudentNum(String studentNum) { this.studentNum = studentNum; }

    public String getStudentName() { return studentName; }
    public void setStudentName(String studentName) { this.studentName = studentName; }

    public int getAge() { return Age; }
    public void setAge(int age) { Age = age; }

    public String getStdPhone_number() { return stdphone_number; }
    public void setStdPhone_number(String stdphone_number) { this.stdphone_number = stdphone_number; }

    public String getStudentAddress() { return studentAddress; }
    public void setStudentAddress(String studentAddress) { this.studentAddress = studentAddress; }

    public Subject[] getSubjects() { return subjects; }
    public void setSubjects(Subject[] subjects) { this.subjects = subjects; }

    public int getCount() { return count; }
    public void setCount(int count) { this.count = count; }
}