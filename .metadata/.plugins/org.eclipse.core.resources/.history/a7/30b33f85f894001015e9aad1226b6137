package day18;

public class Thread01 {

	public static void main(String[] args) {
		// Thread(쓰레드) : 실제로 작업을 수행하는 단위
		/* - 프로그램이 실행되면 O/S로부터 메모리를 할당받아 process의 상태가 됨.
		 * - Ctrl+Shift+Delete Key를 눌러보면 "프로세스"
		 *   -> O/S에서 현재 작동되고 있는 프로그램을 Display해 준다.
		 * - Process 안에 작은 작업단위, Thread 단위로 실제 작업을 수행.
		 * - Thread가 실제 CPU가 작업을 처리하는 단위
		 * - Multi-Thread : 여러 개의 스레드가 동시에 수행되는 프로그램.
		 * - CPU는 시간을 잘게 쪼개서 thread를 번갈아 수행함 (시분할 처리)
		 * - 사용자들은 동시에 처리되는 듯한 효과를 가지게 됨.
		 * - thread는 각자의 자신의 작업공간을 가짐(context)
		 * - 공유된 자원(resource)가 있음.
		 * - 여러 thread는 공유자원을 사용하려고 경쟁이 발생함.
		 * - 그 경쟁구역을 critical section(임계영역)
		 * - 임계영역의 충돌(교착상태: deadlock)이 발생하지 않도록
		 * - 동기화(순차 처리)를 구현하여 오류를 막음.
		 * - 스레드의 상태변화
		 *   - 생성(New) -> 준비(Runnable) -> 실행(Running) 
		 *   -> 대기(Waiting/Blocked) -> 종료(Terminated)
		 */
		
		/* Thread를 구현하는 방법은 2가지
		 * 1. Thread 클래스를 상속하여 만들기
		 * 2. Runnable 인터페이스를 구현하여 만들기
		 * 자바는 다중상속을 허용하지 않기 때문에
		 * 만약 클래스가 상속 중이라면 인터페이스를 구현해야 함 
		 */
		
		// 현재 실행 중인 쓰레드 이름(Main)
		System.out.println(Thread.currentThread().getName()); 

		MyThread th = new MyThread();
		// start() 호출 => 스레드 실행
		// run X => start()
		th.start();
		
		MyThread th2 = new MyThread();
		th2.start();
		
		System.out.println("thread end~!!");
	}

}


class MyThread extends Thread{
	
	@Override
	public void run() {
		//1부터 2000까지 반복 출력하는 구문 실행
		for(int i=0; i<2000; i++) {
			System.out.println(i+". thread"+getName());
		}
		
		
	}
	
}