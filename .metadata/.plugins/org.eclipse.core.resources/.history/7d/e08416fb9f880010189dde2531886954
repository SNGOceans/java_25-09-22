package day07;

public class Class01 {

	/* 클래스의 구성요소 : 멤버변수, 메서드, (생성자)
	 * 멤버변수를 먼저, (생성자), 메서드
	 * 
	 * 클래스 - 객체를 생성하기 위한 설계도
	 * 객체 - 제품(클래스로부터 생성된 제품)
	 * 메서드 - 제품의 기능
	 * 멤버변수 - 속성(메서드에서 필요한 값들을 저장 정보값)
	 * 
	 * 프린트 클래스
	 * - 속성(멤버변수) : 크기, 색, 제조사, 제품명, 종류
	 * - 기능(메서드) : 인쇄, 복사, 스캔, 팩스
	 * 
	 * 클래스는 다른 클래스와 겹치지 않게 정의
	 * 클래스는 메서드와 달리, () 매개변수를 안에 넣어주지 않는다.
	 * 이너 클래스로, 클래스 안에 클래스를 정의하는 방법이 있음. (특이한 경우)
	 * 클래스 선언 시 class 클래스명 { }
	 * public은 class의 주인 (실제 클래스 file 이름)만 선언이 가능하다.
	 * 
	 * 객체 선언 > 생성
	 * 클래스타입 객체명 = new 클래스명() => 클래스타입 객채명 = new 생성자()
	 * 
	 * 클래스타입 객체명; => 값은 null
	 * 객체명 = new 클래스명();
	 * 
	 * 메서드 사용방법(static이 안 붙은 일반 메서드)
	 * - 다른 클래스에서 호출할 경우 => 객체를 선언 후 객체명.메서드명();
	 * - 같은 클래스에서 호출할 경우 => 메서드명()
	 * 
	 * 접근제어자
	 * public : 모두 사용가능
	 * protected : 나+내 패키지+자식클래스 사용가능(상속 시)
	 * (default) : No 접근제어자, 나 + 패키지
	 * private : 한 클래스 안에서만 사용 가능.
	 * 
	 * private < default < protected <public.
	 * 
	 * - 하나의 파일 안에 하나의 클래스만 있을 수 있는 건 아니다.
	 * - 그러나 책임 구분을 위해 일반적으로 그렇게 하지 않는다.
	 * - 클래스에서 public을 붙일 수 있는 건 파일명 == 클래스명 같을 경우만 가능.
	 * - 멤버변수, 생성자, 클래스에 모두 접근제어자를 활용한다.
	 * - 일반적으로 멤버변수 private, 메서드는 public을 사용하는 것이 일반적이다.\
	 * - 멤버변수가 private면 다른 클래스에서 접근이 불가능.
	 * */
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}

// 다른 클래스 정의 가능

 class test{
	 
 }